<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
          "http://www.w3.org/TR/html4/strict.dtd">

<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>OpenAPI version 0.5</title>
    <meta name="author" content="Ashley Noel Hinton, Paul Murrell">
    <meta name="description" content="Technical report on version 0.5 of the OpenAPI architecture">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="stylesheet.css">
  </head>

  <body>
    <div class="title">
      <h1>OpenAPI version 0.5</h1>

      <div class="author">
	<p>Ashley Noel Hinton<br>
	  <span class="author-email">
	    <a href="mailto:ahin017@aucklanduni.ac.nz">ahin017@aucklanduni.ac.nz</a>
	</span></p>
	<p>Paul Murrell<br>
	  <span class="author-email">
	    <a href="mailto:paul@stat.auckland.ac.nz">paul@stat.auckland.ac.nz</a>
	</span></p>
	<p class="affiliation">Department of Statistics, University
	  of Auckland</p>
      </div>

      <p class="date">10 May 2016</p>
    </div>

<!-- begin.rcode setup, echo=FALSE, message=FALSE
opts_chunk$set(cache=TRUE)
library(conduit)
end.rcode-->

    <div id="introduction">
      <p>The OpenAPI architecture is designed to help people connect
      with data. The architecture specifies an XML schema for wrapping
      pieces of data analysis code in modules, and combining modules
      in pipelines. The architecture also specifies the requirements
      of OpenAPI glue systems&mdash;software which can interpret and
      execute modules and pipelines
      (<a href="http://stattech.wordpress.fos.auckland.ac.nz/2015-01-introducing-openapi/">Introducing
      OpenAPI</a>). In this report we describe the changes to the
      OpenAPI architecture implemented in version 0.5.</p>

      <p>Version 0.3 of OpenAPI introduced a host attribute to the
      module specification as a method for guaranteeing that module
      source script requirements would be met
      (<a href="http://stattech.wordpress.fos.auckland.ac.nz/2016-01-openapi-version-0-3/">OpenAPI
      version 0.3</a>). This report describes how the module host
      attribute has been replaced with <code>host</code> elements in
      version 0.5. This implementation permits more control over the
      host types supported. This report describes
      how <code>vagrant</code> and <code>docker</code> hosts are
      supported in version 0.5. Version 0.5 of OpenAPI also introduces
      a persistent result format for recording/storing/saving and
      sharing the results of executing modules and pipelines.</p>

      <p>The improvements described in this report have been
      incorporated
      into <a href="https://github.com/anhinton/conduit/releases/tag/v0.5">Conduit
      version 0.5</a>. The Conduit package is a prototype OpenAPI glue system
      implemented as an R package.</p>
    </div>

    <h2>Persistent result formats for modules and pipelines</h2>

    <p>Version 0.5 of the OpenAPI architecture introduces a persistent
    result format for returning the results of executing a module or a
    pipeline. An OpenAPI result object provides any glue system with
    persistent access to a module' or pipeline's output objects. This
    provides a possible means for a glue system to cache module and
    pipeline results. The result format also allows the result of
    pipeline execution to be consumed by the glue system at a future
    time, or for the pipeline outputs to be consumed on another glue
    system or machine entirely.</p>

    <h3>Requirements</h3>

    <p>The main mechanisms for producing persistent module and
    pipeline results are module and pipeline XML files. For a module
    result a glue system should produce a module XML file which, on
    execution, produces the same named output objects as the original
    module, with the same vessel types and formats. Similarly, for a
    pipeline a glue system should produce a pipeline XML file which,
    on execution, produces the same named output objects as the
    component modules in the original pipeline.</p>

    <p>A glue system must be able to produce a gzipped tar archive
    which contains the module result for each module it has
    executed. This archive should have a single directory named for
    the module at its top level. This directory should contain a
    module XML file, which echoes the name of top directory. For
    example, the result of a module named &lsquo;blockdata&rsquo;
    should contain a directory named <code>blockdata</code> which
    contains the file <code>blockdata.xml</code>. This directory can
    also contain any other file resources required by the module
    result XML to produce the module's outputs.</p>

    <p>A glue system must also be able to produce a gzipped tar
    archive which contains the pipeline result for each pipeline it
    has executed. As with module result archives, the pipeline result
    archive should contain at its top level a directory named for the
    executed pipeline. This directory should contain a pipeline result
    XML file named <code>pipeline.xml</code>. This directory can also
    contain any other file resources required by the pipeline result
    XML to produce its component's
    outputs. Only <code>pipeline.xml</code> is required by the
    pipeline result archive specification, but it is expected that an
    archive will also contain the pipeline's module XML files, and the
    files these modules require to produce their outputs. For example,
    Conduit v0.5 includes a named directory for each module in the
    pipeline result archive&mdash;each module directory has the same
    structure as a module result archive.</p>

    <p>A glue system should also be able to unpack module and pipeline
    results from the gzipped tar archives described above. Once
    unpacked a glue system can easily read and execute the archive's
    module and pipeline XML files in the usual way.</p>

    <h3>Recommendations</h3>

    <p>A glue system should at the very least be able to recover
    modules and pipelines from the pipeline and module result archives
    it produces. Ideally a glue system should produce result archives
    from which any simple glue system can recover pipeline and module
    results. To achieve this it is recommended that pipeline and
    module result XML files have minimal system requirements. In
    general this means that a module or pipeline archive should
    contain everything that is required to produce the module outputs,
    and should invoke as little processing as possible to produce
    these outputs.</p>

    <p>One method for creating lightweight module result archives is
    for the glue system to generate a &lsquo;dummy&rsquo; module XML
    file, which simply names its outputs directly. For example, a
    module might produce the following output:</p>

    <pre><code>&lt;output name="birdPicture"&gt;
  &lt;file ref="birdpicture.pdf"/&gt;
  &lt;format formatType="text"&gt;PDF file&lt;/format&gt;
&lt;/output&gt;</code></pre>

    <p>The file produced by this module output could be included in
    the module result archive alongside the module result XML file. The
    module result XML could produce this file output by including the
    output XML above.</p>

    <p>This technique can also be used for URL vessel types. A module
    might contain the following output:</p>

    <pre><code>&lt;output name="episodeTable"&gt;
  &lt;url ref="http://openapi.org/raw/episodeTable.html"/&gt;
  &lt;format formatType="text"&gt;HTML file&lt;/format&gt;  
&lt;/output&gt;</code></pre>

    <p>The module result XML file could include this output XML
    directly to provide this output.</p>

    <p>The case of internal vessel types is not so immediately
    straightforward to solve without some work by the glue
    system. Consider an R-language module with the following
    output:</p>

    <pre><code>&lt;output name="suburbs"&gt;
  &lt;internal symbol="suburbNames"/&gt;
  &lt;format formatType="text"&gt;R list&lt;/format&gt;  
&lt;/output&gt;</code></pre>

    <p>While a glue system will have a built-in method for passing
    internal outputs to the inputs of subsequent modules in normal
    operation, there is no guarantee that the glue system which
    recovers a module result will use the same mechanism. In this case
    the glue system must act as a module <em>author</em> and write a
    module source script which produces an internal language object to
    be named as an output. For example, a glue system could serialize
    the output named above to a file
    called <code>suburbNames.rds</code> with the R
    function <code>saveRDS()</code>. This file could be placed in the
    module result archive alongside the module result XML file. The
    glue system could wrap the following source script in the module
    result XML:</p>

    <pre><code>suburbNames &lt;- readRDS("suburbNames.rds")</code></pre>

    <p>The module result XML can now name this output using the same
    output code as above, as this internal object will now be created
    upon execution of the module result.</p>

    <p>Where a module names a <code>host</code> machine
    (see <a href="#running-modules-on-host-machines">later
    section</a>) for execution of its source scripts it is recommended
    that the subsequent module result should <em>not</em> require use
    of a host to produce its outputs. This should improve the
    portability and &lsquo;weight&rsquo; of the result archive. On the
    other hand, if the code authored by the glue system to represent
    the result does have significant system requirements, it may make
    sense to specify a (different) host for the module result.</p>

    <h3>Implementation in Conduit v0.5</h3>

    <p>The following examples demonstrate how persistent pipeline and
    module results have been implemented in
    <a href="https://github.com/anhinton/conduit/releases/tag/v0.5">Conduit
    v0.5</a>.</p>

    <p>The result of executing a module is a <code>moduleResult</code>
    object:</p>

<!--begin.rcode moduleResult
mod1 <- loadModule(name = "mod1",
                   ref = system.file("extdata", "test_pipeline", "module1.xml",
                                     package = "conduit"))
modRes1 <- runModule(mod1)
class(modRes1)
end.rcode-->

    <p>A <code>moduleResult</code> object can be exported to a module
    result tar archive using the <code>export()</code> function:</p>
    
<!--begin.rcode modResultExport
modExport1 <- export(modRes1)
basename(modExport1)
end.rcode-->

    <p>The resulting tar
    archive&mdash;<a href="mod1.tar.gz">mod1.tar.gz</a>&mdash;contains the
    module result XML file (mod1.xml) and the files it requires to
    reproduce the module outputs:</p>
    
<!--begin.rcode modTarContents, echo=FALSE
out <- tempfile("out")
system2("tar", c("-tf", modExport1), stdout = out)
readLines(out)
end.rcode-->

    <p>Exported module result archives can be recovered using
    the <code>importModule()</code> function:</p>

<!--begin.rcode recoverModuleResult
recoveredMod1 <- importModule(tarfile = modExport1, name = "recoveredMod1")
class(recoveredMod1)
end.rcode-->

    <p>The module result produced by running this recovered module
    within the same glue system should be indentical to the original
    module result, i.e. module results should &lsquo;round
    trip.&rsquo;</p>

    <p>The result of running a pipeline is
    a <code>pipelineResult</code> object:</p>

<!--begin.rcode pipelineResult
pipeline1 <- loadPipeline(
    name = "pipeline1",
    ref = system.file("extdata", "test_pipeline", "pipeline.xml",
                      package = "conduit"))
pipelineRes1 <- runPipeline(pipeline1)
class(pipelineRes1)
end.rcode-->

    <p>A <code>pipelineResult</code> object can be exported to a
    pipeline result tar archive using the <code>export()</code>
    function:</p>

<!--begin.rcode pipelineResultExport
pplExport1 <- export(pipelineRes1)
basename(pplExport1)
end.rcode-->

    <p>The resulting tar
    archive&mdash;<a href="pipeline1.tar.gz">pipeline1.tar.gz</a>&mdash;contains
    the pipeline result XML file (pipeline.xml) and the files it
    requires to reproduce the pipeline outputs, including the module
    XML files required to produce the result of each module in the
    pipeline:</p>

<!--begin.rcode pplTarContents, echo=FALSE
out <- tempfile("out")
system2("tar", c("-tf", pplExport1), stdout = out)
readLines(out)
end.rcode-->

    <p>Exported pipeline result archives can be recovered using
    the <code>importPipeline()</code> function:</p>

<!--begin.rcode recoverPipelineResult
recoveredPpl1 <- importPipeline(tarfile = pplExport1, name = "recoveredPpl1")
class(recoveredPpl1)
end.rcode-->

    <p>Running the pipeline recovered from a pipeline result archive
    should, within the same glue system, also produce a pipeline
    result identical to the original pipeline result&mdash;pipeline
    results, like module results, &lsquo;round trip.&rsquo;</p>
      
    <h2 id="running-modules-on-host-machines">Running modules on host machines</h2>

    <p>OpenAPI version 0.3 introduced module hosts to help solve the
    &lsquo;dependency problem&rsquo;
    (<a href="https://anhinton.github.io/report-openapiv0.3/report.html#c14-module-host">'Module
    host' in OpenAPI version 0.3</a>). In this section we will
    describe the dependency problem, and how module hosts offer a
    solution to this problem. We then describe changes to host modules
    in OpenAPI version 0.5. We conclude his section with a
    demonstration of two types of module hosts&mdash;docker and
    vagrant&mdash;and examples of how support for these host types has
    been implemented in Conduit v0.5.</p>

    <h3>What is the dependency problem?</h3>

    <p>The dependency problem is the problem of ensuring an OpenAPI
    glue system can meet the hardware and software requirements of any
    given module's source scripts. There are three broad variations on
    the dependency problem: meeting the requirements of a module
    source script; providing a module's specified language; providing
    an environment for the glue system software itself.</p>

    <ol>
      <li>
	<h4>Source script dependencies</h4>

	<p>Within a module's source scripts it is reasonable to expect
	that a script author will want to make use of installable
	libraries and packages within the platform. For example, an R
	script author may make use of
	the <a href="http://cran.stat.auckland.ac.nz/web/packages/gridSVG/index.html"><code>gridSVG</code></a>
	package from the Comprehensive R Archive Network
	(<a href="http://cran.r-project.org/mirrors.html">CRAN</a>). Executing
	a module with &ldquo;<code>library(gridSVG)</code>&rdquo; in
	the author's source script would fail if the glue system does
	not have access an R session in which the <code>gridSVG</code>
	package available. Similarly a Python script author might call
	&ldquo;<code>from TwitterAPI import TwitterAPI</code>&rdquo;,
	which would fail if the glue system could not access a Python
	session in which
	the <a href="https://pypi.python.org/pypi/TwitterAPI/2.3.1"><code>TwitterAPI</code></a>
	package from the <a href="https://pypi.python.org/pypi">Python
	Package Index</a> is available.</p></li>

      <li>
	<h4>Platform dependencies</h4>

	<p>A module author may require a specific version of a
	software platform to be available for her module scripts. For
	example, a module mighty specify that it requires
	&ldquo;<code>R &gt;= 3.0</code>&rdquo;.  It would be desirable
	for a glue system to indicate if it is unable to meet this
	requirement.</p>

	<p>Conceivably a module could have even more specific platform
	requirements, including fine-grained details about the system
	on which the platform software is run. How might a glue system
	provide &quot;<code>R &gt;= 3.1</code>&rdquo;, alongside
	&ldquo;<code>java &gt;= 1.7</code>&rdquo;, on an
	&ldquo;<code>Ubuntu 14.04 64-bit</code>&rdquo; system?<p></li>
      
      <li>
	<h4>Glue system dependencies</h4>

	<p>A glue system itself might require a particular software or
	hardware environment to run. For
	example, <a href="https://github.com/anhinton/conduit"><code>conduit</code></a>,
	a glue system distributed as an R package, was created to run
	in &ldquo;<code>R &gt;= 3</code>&rdquo; on Ubuntu
	14.04. Though it can probably be installed in R on Windows, it
	almost certainly will not work, as it makes assumptions about
	system paths which are only satisfied in Linux.<p></li>
    </ol>

    <h3>Module hosts in OpenAPI v0.5</h3>

    <p>Module hosts were introduced in OpenAPI v0.3 to solve the first
    variation of the dependency problem: meeting module source script
    dependencies. A module host is a real or virtual computer,
    accessible by the glue system, which meets the software and system
    dependencies of a module's source script&mdash;the glue system
    executes the a module's source scripts on the host machine instead
    of executing the code locally. In this section we describe the
    changes to the specification of module hosts in OpenAPI v0.5.</p>

    <p>In OpenAPI v0.3 a module host was a machine which could be
    accessed using the SSH protocol. The module host was specified
    using a host attribute, as in the following example:</p>

    <pre><code>&lt;module language="R" host="conduit@openapi.org:2222"&gt;
  ...
&lt;/module&gt;</code></pre>

    <p>The use of the SSH protocol allowed a glue system to connect to
    many types of host machines, both physical and virtual, using a
    single interface. However, using the SSH method made the glue
    system responsible for managing authentication with the remote
    host, and did not allow a module author to take advantage of host
    machine-specific authentication and execution methods.</p>

    <p>In OpenAPI version 0.5 the module host attribute has been
    replaced with <code>host</code> elements. A <code>host</code>
    element can contain elements describing how the glue system can
    connect to a variety of host machine types. A glue system can
    support any <code>host</code> type specified in the architecture
    specification. OpenAPI v0.5 specifies <code>docker</code>
    and <code>vagrant</code> host elements for a glue system to
    connect to a host on
    a <a href="https://www.docker.com/">Docker</a> container and on
    a <a href="https://www.vagrantup.com/">Vagrant</a> machine,
    respectively. An OpenAPI glue system is responsible for preparing
    the resources required for a module <code>host</code> machine to
    execute a module's source scripts, and for retrieving the outputs
    resulting from executing a module.</p>

    <p>The following sections provide details for specifying a host
    for module execution using Docker and Vagrant.</p>

    <h3>Docker host containers</h3>

    <p>A module author can specify that a module is to be executed on
    a Docker container host using the <code>docker</code>
    element. This element has one required attribute,
    &lsquo;image&rsquo;, and one optional attribute,
    &lsquo;guestdir&rsquo;. The &lsquo;image&rsquo; attribute accepts
    the name of
    a <a href="https://docs.docker.com/engine/userguide/containers/dockerimages/">Docker
    image</a> to be used for execution. The &lsquo;guestdir&rsquo;
    attribute accepts the file path of the directory where the module
    source scripts will be executed on the Docker container (guest
    machine). A module author specifies a module should be executed
    using a Docker container which uses the Docker image
    &ldquo;rocker/r-base&rdquo; as in the following example:</p>
    
    <pre><code>&lt;module language="R"&gt;
  &lt;host&gt;
    &lt;docker image="rocker/r-base"/&gt;
  &lt;/host&gt;
  ...
&lt;/module&gt;</code></pre>

    <p>Support for <code>docker</code> host elements has been
    implemented
    in <a href="https://github.com/anhinton/conduit/releases/tag/v0.5">Conduit
    v0.5</a>. When the &lsquo;guestdir&rsquo; is not provided, as in
    the above example, Conduit will execute in the
    &ldquo;/home/conduit&rdquo; directory on the Docker
    container. Preparing and retrieving of module input and output
    objects is simplified for <code>docker</code> hosts in Conduit
    v0.5 by syncing the glue system's module output directory directly
    with the Docker container. The Conduit package requires that
    Docker be installed on the system, and that the user running the R
    session is a member of the &lsquo;docker&rsquo; group. Conduit 0.5
    was tested using Docker version 1.11.1. Adding a user to the
    &lsquo;docker&rsquo; group in Ubuntu Linux is described in
    the <a href="https://docs.docker.com/engine/installation/linux/ubuntulinux/#create-a-docker-group">Docker
    documentation</a>.</p>

    <p>The following example demonstrates how a module with
    a <code>docker</code> module host can be executed in Conduit
    v0.5. The module
    file <a href="dockerModule.xml">dockerModule.xml</a>
    contains <code>host</code> XML specifying that the module source
    scripts should be executed on a Docker container made from the
    &ldquo;rocker/r-base&rdquo; image:</p>

    <pre><code>&lt;host&gt;
  &lt;docker image="rocker/r-base"/&gt;
&lt;/host&gt;</code></pre>

    <p>The module is read into Conduit in the usual fashion:</p>

<!-- begin.rcode loadDockerModule
dockerModule <- loadModule(name = "dockerModule", ref = "dockerModule.xml")
end.rcode-->

    <p>Then the module is executed in the usual fashion:</p>

<!--begin.rcode runDockerModule
result1 <- runModule(module = dockerModule)
end.rcode-->

    <p>If the user running Conduit is in the &lsquo;docker&rsquo;
    group, and Docker is installed, the module source scripts will be
    executed on the Docker container. This will produce
    a <code>moduleResult</code> object which can be exported to a
    module result archive.</p>

<!--begin.rcode exportDockerModule
export1 <- export(result1)
end.rcode-->

    <p>The module result archive from this example is available for
    inspection
    at <a href="dockerModule.tar.gz">dockerModule.tar.gz</a>.</p>

    <h3>Vagrant host machines</h3>

    <p>A module author can specify that a module is to be executed on
    a Vagrant machine using the <code>vagrant</code>
    element. The <code>vagrant</code> element has one required
    attribute, &lsquo;vagrantfile&rsquo;, and two optional attributes,
    &lsquo;guestdir&rsquo; and &lsquo;hostdir&rsquo;. The
    &lsquo;vagrantfile&rsquo; attribute requires a file path to
    a <a href="https://www.vagrantup.com/docs/vagrantfile/">Vagrantfile</a>
    on the local system. The &lsquo;hostdir&rsquo; attribute allows
    the module author to name a directory on the machine running a
    glue system (host system) which is to
    be <a href="https://www.vagrantup.com/docs/synced-folders/">synced
    with the Vagrant machine</a>. The &lsquo;guestdir&rsquo; attribute
    allows the module author to specify the directory on the Vagrant
    machine (guest machine) to be synced with
    &lsquo;hostdir&rsquo;. The following demonstrates how a module
    author specifies a Vagrant host machine:</p>

    <pre><code>&lt;module language="R"&gt;
  &lt;host&gt;
    &lt;vagrant vagrantfile="~/vagrant/vagrant-conduit/Vagrantfile"/&gt;
  &lt;/host&gt;
  ...
&lt;/module&gt;</code></pre>

    <p>In this example the module source scripts will be executed
    using the Vagrant machine defined using the Vagrantfile found at
    &ldquo;~/vagrant/vagrant-conduit/Vagrantfile&rdquo; on the machine
    running a glue system.</p>

    <p>Support for <code>vagrant</code> host elements has been
    implemented
    in <a href="https://github.com/anhinton/conduit/releases/tag/v0.5">Conduit
    v0.5</a>. When the module author does not specify a
    &lsquo;hostdir&rsquo; Conduit will use the directory containing
    the specified &lsquo;vagrantfile&rsquo; as the synced folder. If
    the author does not specify a &lsquo;guestdir&rsquo; Conduit will
    use the &ldquo;/vagrant&rdquo; directory as the target for the
    synced folder on the Vagrant machine (guest machine). Conduit v0.5
    prepares the host machine by preparing the &lsquo;hostdir&rsquo;,
    and thus the &lsquo;guestdir&rsquo;, with the resources required
    to execute the module. After executing the module in
    &lsquo;guestdir&rsquo; on the Vagrant machine, Conduit returns the
    subsequent outputs to the glue system's own module output
    directory. Conduit will use the defaults for
    &lsquo;hostdir&rsquo;, and &lsquo;guestdir&rsquo; in the Vagrant
    host XML described above.</p>

    <p>The Conduit package requires that Vagrant be installed on the
    system, and that the file named in &lsquo;vagrantfile&rsquo;
    exists on the local filesystem. It also requires that the Vagrant
    machine named be running when the module is executed&mdash;Conduit
    will not start a stopped Vagrant machine. Conduit 0.5 was tested
    using Vagrant version 1.8.1.</p>

    <p>The following example demonstrates how a module with
    a <code>vagrant</code> module host can be executed in Conduit
    v0.5. The module
    file <a href="vagrantModule.xml">vagrantModule.xml</a>
    contains <code>host</code> XML specifying that the module source
    scripts should be executed on a Vagrant machine described in a
    Vagrantfile found on the local machine at
    &ldquo;~/vagrant/vagrant-conduit/Vagrantfile&rdquo;, with this
    machine having already been started. The Vagrantfile used in this
    example, and its provisioning scripts, can
    be <a href="https://github.com/anhinton/vagrant-conduit/releases/tag/v0.5">downloaded
    from github</a>.</p>

    <pre><code>&lt;host&gt;
  &lt;vagrant vagrantfile="~/vagrant/vagrant-conduit/Vagrantfile"/&gt;
&lt;/host&gt;</code></pre>

    <p>The module is read into Conduit in the usual fashion:</p>

<!-- begin.rcode loadVagrantModule
vagrantModule <- loadModule(name = "vagrantModule", ref = "vagrantModule.xml")
end.rcode-->

    <p>Then the module is executed in the usual fashion:</p>

<!--begin.rcode runVagrantModule
result2 <- runModule(module = vagrantModule)
end.rcode-->

    <p>If: (a) Vagrant is installed on the machine running Conduit;
    (b) there is a Vagrantfile at
    &ldquo;~/vagrant/vagrant-conduit/Vagrantfile&rdquo;; and (c) this
    Vagrant machine has been started, the module source scripts will
    be executed in the Vagrant machine. This will produce
    a <code>moduleResult</code> object which can be exported to a
    module result archive.</p>

<!--begin.rcode exportVagrantModule
export2 <- export(result2)
end.rcode-->

    <p>The module result archive from this example is available for
    inspection
    at <a href="vagrantModule.tar.gz">vagrantModule.tar.gz</a>.</p>

    <h2>Discussion</h2>

    <p>In this report we have described the introduction of persistent
    result archives for modules and pipelines in OpenAPI version
    0.5. These result archives allow for the outputs produced by an
    OpenAPI module or pipeline to be preserved and recovered at a
    later time, or even in another glue system or on another
    machine. Within a glue system this provides a mechanism for
    caching module results, preventing a glue system from having to
    execute a computationally- or time-intensive task multiple
    times. It also provides a mechanism for sharing these results with
    other users. A pipeline result can serve as a simplified method
    for a user to incorporate results from modules which may not be
    practical to execute on her local machine, while still employing
    module and pipeline XML.</p>

    <p>We have also described how module host machines can help to
    solve an aspect of the dependency problem, by guaranteeing a glue
    system can meet the system requirements of a module's source
    scripts. The changes to module <code>host</code> elements
    implemented in OpenAPI v0.5 provide more nuanced access to Docker
    and Vagrant virtual computer environments, allowing a module
    author to take advantage of each of these systems. Via the
    mechanism a module result archive is something like a
    self-contained executable mini-program, producing output results
    on any machine with a suitable glue system environment. The
    OpenAPI v0.5 specification also provides a path for adding other
    host types in the future. The authors believe that a more
    considered implementation of an <code>ssh</code> host type is
    desireable in future developments of OpenAPI.</p>

    <p>Two technical reports demonstrate how <code>docker</code> hosts
    can be used in authoring OpenAPI
    pipelines. <a href="http://stattech.wordpress.fos.auckland.ac.nz/2016-05-an-improved-pipeline-for-cpi-data/">An
    Improved Pipeline for CPI Data</a> (2016)
    and <a href="http://stattech.wordpress.fos.auckland.ac.nz/2016-06-an-openapi-pipeline-for-nz-crime-data/">An
    OpenAPI Pipeline for NZ Crime Data</a> (2016) are written using
    Conudit v0.5.</p>

    <h2>Technical requirements</h2>

    <ul>
      <li>The changes to OpenAPI version 0.5 described in this report
      have been implemented in version 0.5 of
      the <a href="https://github.com/anhinton/conduit/releases/tag/v0.5">Conduit</a>
      package (Hinton &amp; Murrell, 2016), a prototype OpenAPI glue
      system implemented in R.</li>
      <li>Development and testing of Conduit v0.5, and the execution
      of the examples in this report, were done on
      an <a href="http://www.ubuntu.com/">Ubuntu 16.04 64-bit</a>
      machine using <a href="https://www.r-project.org/">R version
      3.2.5</a>.</li>
      <li>Docker module hosts were tested in Conduit v0.5
      using <a href="https://www.docker.com/">Docker Engine
      v1.11.1</a>.</li>
      <li>Vagrant module hosts were tested in Conduit v0.5
      using <a href="https://vagrantup.com/">Vagrant v1.8.1</a>
      and <a href="https://www.virtualbox.org/">VirtualBox
      v5.0.20</a>.</li>
      <li>The example of running a module with a <code>vagrant</code>
      host type uses a Vagrant machine built from the Vagrantfile and
      provisiong scripts found in version 0.5 of
      the <a href="https://github.com/anhinton/vagrant-conduit/releases/tag/v0.5">vagrant-conduit
      repository on github</a>.
    </ul>

    <h2>Resources</h2>

    <ul>
      <li><a href="http://stattech.wordpress.fos.auckland.ac.nz/2015-01-introducing-openapi/">Introducing
      OpenAPI</a> (Hinton &amp; Murrell, 2015) describes the original
      conception and design of the OpenAPI architecture.</li>
      <li>Several design changes and new features in OpenAPI are
      documented
      in <a href="http://stattech.wordpress.fos.auckland.ac.nz/2016-01-openapi-version-0-3/">OpenAPI
      version 0.3</a> (Hinton &amp; Murrell, 2016).</li>
      <li>XML schema for version 0.5 of OpenAPI
      are <a href="https://github.com/anhinton/openapiValidation/releases/tag/v0.5">available
      on Github</a>.</li>
      <li>The <code>docker</code> host example in this report uses the
      module file <a href="dockerModule.xml">dockerModule.xml</a>.</li>
      <li>The <code>vagrant</code> host example in this report uses the
      module file <a href="vagrantModule.xml">vagrantModule.xml</a>.</li>
      <li><a href="http://stattech.wordpress.fos.auckland.ac.nz/2016-05-an-improved-pipeline-for-cpi-data/">
	  An Improved Pipeline for CPI Data</a> (Murrell, 2016) uses
	  Conduit v0.5 and the <code>docker</code> host type to build
	  a user-friendly web front-end for running an OpenAPI
	  pipeline.</li>
      <li><a href="http://stattech.wordpress.fos.auckland.ac.nz/2016-06-an-openapi-pipeline-for-nz-crime-data/">
	  An OpenAPI Pipeline for NZ Crime Data</a> (Murrell, 2016)
	  uses Conduit v0.5 and the <code>docker</code> host type to
	  build a pipeline to explore NZ Crime data.</li>
      <li>This report was produced using
      the <a href="http://yihui.name/knitr/">knitr</a> package in
      R. The source document is available
      at <a href="report.Rhtml">report.Rhtml</a>.</li>
    </ul>
      
    <hr>

    <div class="footer">
      <p>
	<a rel="license" href="http://creativecommons.org/licenses/by/4.0/"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by/4.0/88x31.png"></a><br><span xmlns:dct="http://purl.org/dc/terms/" property="dct:title">OpenAPI  0.5</span> by <span xmlns:cc="http://creativecommons.org/ns#" property="cc:attributionName">Ashley Noel Hinton and Paul Murrell</span> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International License</a>.
      </p>
    </div>
    
  </body>
  
</html>
